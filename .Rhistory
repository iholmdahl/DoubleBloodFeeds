sampling_bin <- c()
for(i in 1:length(compartment_list)) {
sampling_bin <- c(sampling_bin, rep(i,as.integer(compartment_list[i])))
}
# next we pull samples (labeled by compartments) from that bin
# each mosquito either dies or does not will have a probability of death corresponding to
sample_size <- 100   # number of mosquitoes collected for each assay
n_samples <- 1000    # number of samples
observation_distribution <- c()
for(j in 1:n_samples){
mosquito_sample <- sample(sampling_bin, sample_size, replace = FALSE, prob = NULL)
observed_survival <- 0
for(i in mosquito_sample){
observed_survival <- observed_survival + rbinom(1, 1, assay_survival[i])
}
observation_distribution[j] <- observed_survival
box_plot_data[x,1] <- x
box_plot_data[x,2] <- coverage
box_plot_data[x,3] <- observed_survival
box_plot_data[x,4] <- r_proportions[d]
box_plot_data[x,5] <- nonrandom_assay_survival
x=x+1
}
qplot(observation_distribution, geom="histogram", binwidth = 1, xlim=c(0,100),
fill=I("white"), col=I("red"), ylab = "count", xlab = "observed % survival") + geom_vline(xintercept = 100*nonrandom_assay_survival)
}
warnings()
box_plot_data <- data.frame(sim_id=numeric(), coverage = numeric(), survival=numeric(), Pr_R_genes=numeric(), expected_survival=numeric())
simulation_days <- c(364,457,517,579,678)
r_proportions <- c(10,30,50,70,90)
x <- 1
for(d in 1:5){
# we then make a list of all compartments on that day
day <- simulation_days[d]
compartment_list <- c(SS_E0_d1[day], SS_E0_d2[day], SS_E0_d3[day], SS_E0_d4[day], SS_E0_d5[day], SS_E0_d6[day], SS_E0_d7[day], SS_E0_d8[day], SS_E0_d9[day], SS_E0_d10[day],
SS_E0_d11[day], SS_E0_d12[day], SS_E0_d13[day], SS_E0_d14[day], SS_E0_d15[day], SS_E0_d16[day], SS_E0_d17[day], SS_E0_d18[day], SS_E0_d19[day],
SS_E0_d20[day], SS_E0_d21[day], SS_E0_d22[day], SS_E0_d23[day], SS_E0_d24[day], SS_E0_d25[day], SS_E0_d26[day], SS_E1_d4[day], SS_E1_d5[day],
SS_E1_d6[day], SS_E1_d7[day], SS_E1_d8[day], SS_E1_d9[day], SS_E1_d10[day], SS_E1_d11[day], SS_E1_d12[day], SS_E1_d13[day], SS_E1_d14[day],
SS_E1_d15[day], SS_E1_d16[day], SS_E1_d17[day], SS_E1_d18[day], SS_E1_d19[day], SS_E1_d20[day], SS_E1_d21[day], SS_E1_d22[day], SS_E1_d23[day],
SS_E1_d24[day], SS_E1_d25[day], SS_E1_d26[day], SS_E2_d8[day], SS_E2_d9[day], SS_E2_d10[day], SS_E2_d11[day], SS_E2_d12[day], SS_E2_d13[day],
SS_E2_d14[day], SS_E2_d15[day], SS_E2_d16[day], SS_E2_d17[day], SS_E2_d18[day], SS_E2_d19[day], SS_E2_d20[day], SS_E2_d21[day], SS_E2_d22[day],
SS_E2_d23[day], SS_E2_d24[day], SS_E2_d25[day], SS_E2_d26[day], SR_E0_d1[day], SR_E0_d2[day], SR_E0_d3[day], SR_E0_d4[day], SR_E0_d5[day], SR_E0_d6[day],
SR_E0_d7[day], SR_E0_d8[day], SR_E0_d9[day], SR_E0_d10[day], SR_E0_d11[day], SR_E0_d12[day], SR_E0_d13[day], SR_E0_d14[day], SR_E0_d15[day], SR_E0_d16[day],
SR_E0_d17[day], SR_E0_d18[day], SR_E0_d19[day], SR_E0_d20[day], SR_E0_d21[day], SR_E0_d22[day], SR_E0_d23[day], SR_E0_d24[day], SR_E0_d25[day], SR_E0_d26[day],
SR_E1_d4[day], SR_E1_d5[day], SR_E1_d6[day], SR_E1_d7[day], SR_E1_d8[day], SR_E1_d9[day], SR_E1_d10[day], SR_E1_d11[day], SR_E1_d12[day], SR_E1_d13[day],
SR_E1_d14[day], SR_E1_d15[day], SR_E1_d16[day], SR_E1_d17[day], SR_E1_d18[day], SR_E1_d19[day], SR_E1_d20[day], SR_E1_d21[day], SR_E1_d22[day], SR_E1_d23[day],
SR_E1_d24[day], SR_E1_d25[day], SR_E1_d26[day], SR_E2_d8[day], SR_E2_d9[day], SR_E2_d10[day], SR_E2_d11[day], SR_E2_d12[day], SR_E2_d13[day], SR_E2_d14[day],
SR_E2_d15[day], SR_E2_d16[day], SR_E2_d17[day], SR_E2_d18[day], SR_E2_d19[day], SR_E2_d20[day], SR_E2_d21[day], SR_E2_d22[day], SR_E2_d23[day],
SR_E2_d24[day], SR_E2_d25[day], SR_E2_d26[day], RR_E0_d1[day], RR_E0_d2[day], RR_E0_d3[day], RR_E0_d4[day], RR_E0_d5[day], RR_E0_d6[day], RR_E0_d7[day], RR_E0_d8[day],
RR_E0_d9[day], RR_E0_d10[day], RR_E0_d11[day], RR_E0_d12[day], RR_E0_d13[day], RR_E0_d14[day], RR_E0_d15[day], RR_E0_d16[day], RR_E0_d17[day], RR_E0_d18[day], RR_E0_d19[day],
RR_E0_d20[day], RR_E0_d21[day], RR_E0_d22[day], RR_E0_d23[day], RR_E0_d24[day], RR_E0_d25[day], RR_E0_d26[day], RR_E1_d4[day], RR_E1_d5[day],
RR_E1_d6[day], RR_E1_d7[day], RR_E1_d8[day], RR_E1_d9[day], RR_E1_d10[day], RR_E1_d11[day], RR_E1_d12[day], RR_E1_d13[day], RR_E1_d14[day],
RR_E1_d15[day], RR_E1_d16[day], RR_E1_d17[day], RR_E1_d18[day], RR_E1_d19[day], RR_E1_d20[day], RR_E1_d21[day], RR_E1_d22[day], RR_E1_d23[day],
RR_E1_d24[day], RR_E1_d25[day], RR_E1_d26[day], RR_E2_d8[day], RR_E2_d9[day], RR_E2_d10[day], RR_E2_d11[day], RR_E2_d12[day], RR_E2_d13[day],
RR_E2_d14[day], RR_E2_d15[day], RR_E2_d16[day], RR_E2_d17[day], RR_E2_d18[day], RR_E2_d19[day], RR_E2_d20[day], RR_E2_d21[day], RR_E2_d22[day], RR_E2_d23[day],
RR_E2_d24[day], RR_E2_d25[day], RR_E2_d26[day])
# we can start with a non-random assay, where our sample is perfectly representative of population size:
nonrandom_assay_survival <- 0
for(i in 1:length(compartment_list)){
if(!is.na(assay_survival[i])){
nonrandom_assay_survival <- nonrandom_assay_survival + compartment_list[i]*assay_survival[i]/POP[day]
}
}
print(nonrandom_assay_survival)
# Now, we want this to sample randomly from our population, to see the distribution of assay results at a given coverage and resistance level
#  ---------------------------------------------------------------------------------
# we can set up a vector ("sampling_bin") with compartment index numbers proportionate to population of that compartment (this changes depending on the day we are sampling!)
sampling_bin <- c()
for(i in 1:length(compartment_list)) {
sampling_bin <- c(sampling_bin, rep(i,as.integer(compartment_list[i])))
}
# next we pull samples (labeled by compartments) from that bin
# each mosquito either dies or does not will have a probability of death corresponding to
sample_size <- 100   # number of mosquitoes collected for each assay
n_samples <- 1000    # number of samples
observation_distribution <- c()
for(j in 1:n_samples){
mosquito_sample <- sample(sampling_bin, sample_size, replace = FALSE, prob = NULL)
observed_survival <- 0
for(i in mosquito_sample){
observed_survival <- observed_survival + rbinom(1, 1, assay_survival[i])
}
observation_distribution[j] <- observed_survival
box_plot_data[x,1] <- x
box_plot_data[x,2] <- coverage
box_plot_data[x,3] <- observed_survival
box_plot_data[x,4] <- r_proportions[d]
box_plot_data[x,5] <- nonrandom_assay_survival
x=x+1
}
qplot(observation_distribution, geom="histogram", binwidth = 1, xlim=c(0,100),
fill=I("white"), col=I("red"), ylab = "count", xlab = "observed % survival") + geom_vline(xintercept = 100*nonrandom_assay_survival)
}
p <- ggplot(box_plot_data, aes(x=Pr_R_genes, y=survival, group = )) + geom_boxplot()
p
p <- ggplot(box_plot_data, aes(x=Pr_R_genes, y=survival)) + geom_boxplot()
p
box_plot_data$Pr_R_genes <- factor(box_plot_data$Pr_R_genes)
p <- ggplot(box_plot_data, aes(x=Pr_R_genes, y=survival)) + geom_boxplot()
box_plot_data$Pr_R_genes <- factor(box_plot_data$Pr_R_genes, labels = c("10", "30", "50", "70", "90"))
p <- ggplot(box_plot_data, aes(x=Pr_R_genes, y=survival)) + geom_boxplot()
p
# Rotate the box plot
x <- 1
for(d in 1:5){
# we then make a list of all compartments on that day
day <- simulation_days[d]
compartment_list <- c(SS_E0_d1[day], SS_E0_d2[day], SS_E0_d3[day], SS_E0_d4[day], SS_E0_d5[day], SS_E0_d6[day], SS_E0_d7[day], SS_E0_d8[day], SS_E0_d9[day], SS_E0_d10[day],
SS_E0_d11[day], SS_E0_d12[day], SS_E0_d13[day], SS_E0_d14[day], SS_E0_d15[day], SS_E0_d16[day], SS_E0_d17[day], SS_E0_d18[day], SS_E0_d19[day],
SS_E0_d20[day], SS_E0_d21[day], SS_E0_d22[day], SS_E0_d23[day], SS_E0_d24[day], SS_E0_d25[day], SS_E0_d26[day], SS_E1_d4[day], SS_E1_d5[day],
SS_E1_d6[day], SS_E1_d7[day], SS_E1_d8[day], SS_E1_d9[day], SS_E1_d10[day], SS_E1_d11[day], SS_E1_d12[day], SS_E1_d13[day], SS_E1_d14[day],
SS_E1_d15[day], SS_E1_d16[day], SS_E1_d17[day], SS_E1_d18[day], SS_E1_d19[day], SS_E1_d20[day], SS_E1_d21[day], SS_E1_d22[day], SS_E1_d23[day],
SS_E1_d24[day], SS_E1_d25[day], SS_E1_d26[day], SS_E2_d8[day], SS_E2_d9[day], SS_E2_d10[day], SS_E2_d11[day], SS_E2_d12[day], SS_E2_d13[day],
SS_E2_d14[day], SS_E2_d15[day], SS_E2_d16[day], SS_E2_d17[day], SS_E2_d18[day], SS_E2_d19[day], SS_E2_d20[day], SS_E2_d21[day], SS_E2_d22[day],
SS_E2_d23[day], SS_E2_d24[day], SS_E2_d25[day], SS_E2_d26[day], SR_E0_d1[day], SR_E0_d2[day], SR_E0_d3[day], SR_E0_d4[day], SR_E0_d5[day], SR_E0_d6[day],
SR_E0_d7[day], SR_E0_d8[day], SR_E0_d9[day], SR_E0_d10[day], SR_E0_d11[day], SR_E0_d12[day], SR_E0_d13[day], SR_E0_d14[day], SR_E0_d15[day], SR_E0_d16[day],
SR_E0_d17[day], SR_E0_d18[day], SR_E0_d19[day], SR_E0_d20[day], SR_E0_d21[day], SR_E0_d22[day], SR_E0_d23[day], SR_E0_d24[day], SR_E0_d25[day], SR_E0_d26[day],
SR_E1_d4[day], SR_E1_d5[day], SR_E1_d6[day], SR_E1_d7[day], SR_E1_d8[day], SR_E1_d9[day], SR_E1_d10[day], SR_E1_d11[day], SR_E1_d12[day], SR_E1_d13[day],
SR_E1_d14[day], SR_E1_d15[day], SR_E1_d16[day], SR_E1_d17[day], SR_E1_d18[day], SR_E1_d19[day], SR_E1_d20[day], SR_E1_d21[day], SR_E1_d22[day], SR_E1_d23[day],
SR_E1_d24[day], SR_E1_d25[day], SR_E1_d26[day], SR_E2_d8[day], SR_E2_d9[day], SR_E2_d10[day], SR_E2_d11[day], SR_E2_d12[day], SR_E2_d13[day], SR_E2_d14[day],
SR_E2_d15[day], SR_E2_d16[day], SR_E2_d17[day], SR_E2_d18[day], SR_E2_d19[day], SR_E2_d20[day], SR_E2_d21[day], SR_E2_d22[day], SR_E2_d23[day],
SR_E2_d24[day], SR_E2_d25[day], SR_E2_d26[day], RR_E0_d1[day], RR_E0_d2[day], RR_E0_d3[day], RR_E0_d4[day], RR_E0_d5[day], RR_E0_d6[day], RR_E0_d7[day], RR_E0_d8[day],
RR_E0_d9[day], RR_E0_d10[day], RR_E0_d11[day], RR_E0_d12[day], RR_E0_d13[day], RR_E0_d14[day], RR_E0_d15[day], RR_E0_d16[day], RR_E0_d17[day], RR_E0_d18[day], RR_E0_d19[day],
RR_E0_d20[day], RR_E0_d21[day], RR_E0_d22[day], RR_E0_d23[day], RR_E0_d24[day], RR_E0_d25[day], RR_E0_d26[day], RR_E1_d4[day], RR_E1_d5[day],
RR_E1_d6[day], RR_E1_d7[day], RR_E1_d8[day], RR_E1_d9[day], RR_E1_d10[day], RR_E1_d11[day], RR_E1_d12[day], RR_E1_d13[day], RR_E1_d14[day],
RR_E1_d15[day], RR_E1_d16[day], RR_E1_d17[day], RR_E1_d18[day], RR_E1_d19[day], RR_E1_d20[day], RR_E1_d21[day], RR_E1_d22[day], RR_E1_d23[day],
RR_E1_d24[day], RR_E1_d25[day], RR_E1_d26[day], RR_E2_d8[day], RR_E2_d9[day], RR_E2_d10[day], RR_E2_d11[day], RR_E2_d12[day], RR_E2_d13[day],
RR_E2_d14[day], RR_E2_d15[day], RR_E2_d16[day], RR_E2_d17[day], RR_E2_d18[day], RR_E2_d19[day], RR_E2_d20[day], RR_E2_d21[day], RR_E2_d22[day], RR_E2_d23[day],
RR_E2_d24[day], RR_E2_d25[day], RR_E2_d26[day])
# we can start with a non-random assay, where our sample is perfectly representative of population size:
nonrandom_assay_survival <- 0
for(i in 1:length(compartment_list)){
if(!is.na(assay_survival[i])){
nonrandom_assay_survival <- nonrandom_assay_survival + compartment_list[i]*assay_survival[i]/POP[day]
}
}
print(nonrandom_assay_survival)
# Now, we want this to sample randomly from our population, to see the distribution of assay results at a given coverage and resistance level
#  ---------------------------------------------------------------------------------
# we can set up a vector ("sampling_bin") with compartment index numbers proportionate to population of that compartment (this changes depending on the day we are sampling!)
sampling_bin <- c()
for(i in 1:length(compartment_list)) {
sampling_bin <- c(sampling_bin, rep(i,as.integer(compartment_list[i])))
}
# next we pull samples (labeled by compartments) from that bin
# each mosquito either dies or does not will have a probability of death corresponding to
sample_size <- 100   # number of mosquitoes collected for each assay
n_samples <- 10000    # number of samples
observation_distribution <- c()
for(j in 1:n_samples){
mosquito_sample <- sample(sampling_bin, sample_size, replace = FALSE, prob = NULL)
observed_survival <- 0
for(i in mosquito_sample){
observed_survival <- observed_survival + rbinom(1, 1, assay_survival[i])
}
observation_distribution[j] <- observed_survival
box_plot_data[x,1] <- x
box_plot_data[x,2] <- coverage
box_plot_data[x,3] <- observed_survival
box_plot_data[x,4] <- r_proportions[d]
box_plot_data[x,5] <- nonrandom_assay_survival
x=x+1
}
qplot(observation_distribution, geom="histogram", binwidth = 1, xlim=c(0,100),
fill=I("white"), col=I("red"), ylab = "count", xlab = "observed % survival") + geom_vline(xintercept = 100*nonrandom_assay_survival)
}
box_plot_data$Pr_R_genes <- factor(box_plot_data$Pr_R_genes, labels = c("10", "30", "50", "70", "90"))
p <- ggplot(box_plot_data, aes(x=Pr_R_genes, y=survival)) + geom_boxplot()
p
p <- ggplot(box_plot_data, aes(x=Pr_R_genes, y=survival)) + geom_boxplot() + scale_x_continuous(name="% R genes") + scale_y_continuous(name = "observed % survival")
p
p <- ggplot(box_plot_data, aes(x=Pr_R_genes, y=survival)) + geom_boxplot() + scale_x_discrete(name="% R genes") + scale_y_continuous(name = "observed % survival")
p
p <- ggplot(box_plot_data, aes(x=Pr_R_genes, y=survival)) + geom_boxplot() + scale_x_discrete(name="% R genes")
+ scale_y_continuous(name = "observed % survival", breaks=(0,100,5), limits=(0,100)) + ggtitle("Observed survival by underlying resistance %")
p
p <- ggplot(box_plot_data, aes(x=Pr_R_genes, y=survival)) + geom_boxplot() + scale_x_discrete(name="% R genes")
+ scale_y_continuous(name = "observed % survival", breaks=seq(0,100,5), limits=c(0,100)) + ggtitle("Observed survival by underlying resistance %")
p
p <- ggplot(box_plot_data, aes(x=Pr_R_genes, y=survival)) + geom_boxplot() + scale_x_discrete(name="% R genes") + scale_y_continuous(name = "observed % survival", breaks=seq(0,100,5), limits=c(0,100)) + ggtitle("Observed survival by underlying resistance %")
p
p <- ggplot(box_plot_data, aes(x=Pr_R_genes, y=survival)) + geom_boxplot() + scale_x_discrete(name="% R genes") + scale_y_continuous(name = "observed % survival", breaks=seq(0,100,10), limits=c(0,100)) + ggtitle("Observed survival by underlying resistance %")
p
p <- ggplot(box_plot_data, aes(x=Pr_R_genes, y=survival)) + geom_boxplot() + scale_x_discrete(name="% R genes") +
scale_y_continuous(name = "observed % survival", breaks=seq(0,90,10), limits=c(0,100)) + ggtitle("Observed survival by underlying resistance %")
p
p <- ggplot(box_plot_data, aes(x=Pr_R_genes, y=survival)) + geom_boxplot() + scale_x_discrete(name="% R genes") +
scale_y_continuous(name = "observed % survival", breaks=seq(0,100,10), limits=c(0,100)) + ggtitle("Observed survival by underlying resistance %") + theme(bw)
p
p <- ggplot(box_plot_data, aes(x=Pr_R_genes, y=survival)) + geom_boxplot() + scale_x_discrete(name="% R genes") +
scale_y_continuous(name = "observed % survival", breaks=seq(0,100,10), limits=c(0,100)) + ggtitle("Observed survival by underlying resistance %") + theme_bw()
p
p <- ggplot(box_plot_data, aes(x=Pr_R_genes, y=survival)) + geom_boxplot(line="red") + scale_x_discrete(name="% R genes") +
scale_y_continuous(name = "observed % survival", breaks=seq(0,100,10), limits=c(0,100)) + ggtitle("Observed survival by underlying resistance %") + theme_bw()
p
p <- ggplot(box_plot_data, aes(x=Pr_R_genes, y=survival)) + geom_boxplot(fill="golden1", line="red") + scale_x_discrete(name="% R genes") +
scale_y_continuous(name = "observed % survival", breaks=seq(0,100,10), limits=c(0,100)) + ggtitle("Observed survival by underlying resistance %") + theme_bw()
p
p <- ggplot(box_plot_data, aes(x=Pr_R_genes, y=survival)) + geom_boxplot(fill=I("goldenrod1"), line=I("red")) + scale_x_discrete(name="% R genes") +
scale_y_continuous(name = "observed % survival", breaks=seq(0,100,10), limits=c(0,100)) + ggtitle("Observed survival by underlying resistance %") + theme_bw()
p
p <- ggplot(box_plot_data, aes(x=Pr_R_genes, y=survival)) + geom_boxplot(fill=I("goldenrod1"), colour=I("red")) + scale_x_discrete(name="% R genes") +
scale_y_continuous(name = "observed % survival", breaks=seq(0,100,10), limits=c(0,100)) + ggtitle("Observed survival by underlying resistance %") + theme_bw()
p
p <- ggplot(box_plot_data, aes(x=Pr_R_genes, y=survival)) + geom_boxplot(colour=I("red")) + scale_x_discrete(name="% R genes") +
scale_y_continuous(name = "observed % survival", breaks=seq(0,100,10), limits=c(0,100)) + ggtitle("Observed survival by underlying resistance %") + theme_bw()
p
p <- ggplot(box_plot_data, aes(x=Pr_R_genes, y=survival)) + geom_boxplot(fill=I("goldenrod1"), colour=I("black")) + scale_x_discrete(name="% R genes") +
scale_y_continuous(name = "observed % survival", breaks=seq(0,100,10), limits=c(0,100)) + ggtitle("Observed survival by underlying resistance %") + theme_bw()
p
p <- ggplot(box_plot_data, aes(x=Pr_R_genes, y=survival)) + geom_boxplot(fill=I("goldenrod1"), colour=I("black"), outlier.shape=8, outlier.size=4) +
scale_x_discrete(name="% R genes") + scale_y_continuous(name = "observed % survival", breaks=seq(0,100,10), limits=c(0,100)) +
ggtitle("Observed survival by underlying resistance %") + theme_bw()
p
p <- ggplot(box_plot_data, aes(x=Pr_R_genes, y=survival)) + geom_boxplot(fill=I("goldenrod1"), colour=I("black"), outlier.shape=8, outlier.size=1) +
scale_x_discrete(name="% R genes") + scale_y_continuous(name = "observed % survival", breaks=seq(0,100,10), limits=c(0,100)) +
ggtitle("Observed survival by underlying resistance %") + theme_bw()
p
p <- ggplot(box_plot_data, aes(x=Pr_R_genes, y=survival)) + geom_boxplot(fill=I("goldenrod1"), colour=I("black"), outlier.shape=1, outlier.size=1) +
scale_x_discrete(name="% R genes") + scale_y_continuous(name = "observed % survival", breaks=seq(0,100,10), limits=c(0,100)) +
ggtitle("Observed survival by underlying resistance %") + theme_bw()
p
p <- ggplot(box_plot_data, aes(x=Pr_R_genes, y=survival)) + geom_boxplot(fill=I("goldenrod1"), colour=I("black"), outlier.size=1) +
scale_x_discrete(name="% R genes") + scale_y_continuous(name = "observed % survival", breaks=seq(0,100,10), limits=c(0,100)) +
ggtitle("Observed survival by underlying resistance %") + theme_bw()
p
p <- ggplot(box_plot_data, aes(x=Pr_R_genes, y=survival)) + geom_boxplot(fill=I("goldenrod1"), colour=I("black")) +
scale_x_discrete(name="% R genes") + scale_y_continuous(name = "observed % survival", breaks=seq(0,100,10), limits=c(0,100)) +
ggtitle("Observed survival by underlying resistance %") + theme_bw()
p
?geom_boxplot()
p <- ggplot(box_plot_data, aes(x=Pr_R_genes, y=survival)) + geom_boxplot(fill=I("goldenrod1"), colour=I("black"), outlier.size=.5) +
scale_x_discrete(name="% R genes") + scale_y_continuous(name = "observed % survival", breaks=seq(0,100,10), limits=c(0,100)) +
ggtitle("Observed survival by underlying resistance %") + theme_bw()
p
p <- ggplot(box_plot_data, aes(x=Pr_R_genes, y=survival)) + geom_boxplot(fill=I("indianred1"), colour=I("black"), outlier.size=.5) +
scale_x_discrete(name="% R genes") + scale_y_continuous(name = "observed % survival", breaks=seq(0,100,10), limits=c(0,100)) +
ggtitle("Observed survival by underlying resistance %") + theme_bw()
p
p <- ggplot(box_plot_data, aes(x=Pr_R_genes, y=survival)) + geom_boxplot(fill=I("indianred1"), colour=I("black"), outlier.size=.5, alpha = 0.5) +
scale_x_discrete(name="% R genes") + scale_y_continuous(name = "observed % survival", breaks=seq(0,100,10), limits=c(0,100)) +
ggtitle("Observed survival by underlying resistance %") + theme_bw()
p
p <- ggplot(box_plot_data, aes(x=Pr_R_genes, y=survival)) + geom_boxplot(fill=I("indianred1"), colour=I("black"), outlier.size=.5, alpha = 0.75) +
scale_x_discrete(name="% R genes") + scale_y_continuous(name = "observed % survival", breaks=seq(0,100,10), limits=c(0,100)) +
ggtitle("Observed survival by underlying resistance %") + theme_bw()
p
p <- ggplot(box_plot_data, aes(x=Pr_R_genes, y=survival)) + geom_boxplot(fill=I("indianred1"), colour=I("black"), outlier.size=.5, alpha = 0.75) +
scale_x_discrete(name="% R genes") + scale_y_continuous(name = "observed % survival", breaks=seq(0,100,10), limits=c(0,100)) +
ggtitle("Observed survival by underlying resistance %") + theme_bw() + coord_flip()
p
p <- ggplot(box_plot_data, aes(x=Pr_R_genes, y=survival)) + geom_boxplot(fill=I("indianred1"), colour=I("black"), outlier.size=0, alpha = 0.75) +
scale_x_discrete(name="% R genes") + scale_y_continuous(name = "observed % survival", breaks=seq(0,100,10), limits=c(0,100)) +
ggtitle("Observed survival by underlying resistance %") + theme_bw() + coord_flip()
p
p <- ggplot(box_plot_data, aes(x=Pr_R_genes, y=survival)) + geom_boxplot(fill=I("indianred1"), colour=I("black"), outlier.size=0, alpha = 0.75) +
scale_x_discrete(name="% R genes") + scale_y_continuous(name = "observed % survival", breaks=seq(0,100,10), limits=c(0,100)) +
ggtitle("Observed survival by underlying resistance %") + theme_bw() + coord_flip() +
geom_point(data = box_plot_data$expected_survival, color = "blue", position = "jitter", size = 4)
p <- ggplot(box_plot_data, aes(x=Pr_R_genes, y=survival)) + geom_boxplot(fill=I("indianred1"), colour=I("black"), outlier.size=0, alpha = 0.75) +
scale_x_discrete(name="% R genes") + scale_y_continuous(name = "observed % survival", breaks=seq(0,100,10), limits=c(0,100)) +
ggtitle("Observed survival by underlying resistance %") + theme_bw() + coord_flip() +
geom_point(data = expected_survival)
p
p <- ggplot(box_plot_data, aes(x=Pr_R_genes, y=survival)) + geom_boxplot(fill=I("indianred1"), colour=I("black"), outlier.size=0, alpha = 0.75) +
scale_x_discrete(name="% R genes") + scale_y_continuous(name = "observed % survival", breaks=seq(0,100,10), limits=c(0,100)) +
ggtitle("Observed survival by underlying resistance %") + theme_bw() + coord_flip() +
geom_point(data = box_plot_data$expected_survival)
p
library(plotly)
p <- plot_ly(box_plot_data, x = ~survival, color = ~Pr_R_genes, type = "box")
p
library(plotly)
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
library(plotly)
p <- plot_ly(box_plot_data, x = ~survival, color = ~Pr_R_genes, type = "box")
p
library(plotly)
p <- ggplot(box_plot_data, aes(x=Pr_R_genes, y=survival)) + geom_boxplot(fill=I("indianred1"), colour=I("black"), outlier.size=0, alpha = 0.75) +
scale_x_discrete(name="% R genes") + scale_y_continuous(name = "observed % survival", breaks=seq(0,100,10), limits=c(0,100)) +
ggtitle("Observed survival by underlying resistance %") + theme_bw() + coord_flip() +
geom_point(data = box_plot_data$expected_survival)
p
library(ggplot2)
View(PfPR)
PfPR = raster('/Users/Inga/Documents/Harvard/Research/maps/2015_Nature_Africa_PfPR.2015.tif')
PfPR <- setMinMax(PfPR)
library(raster)
# load PfPR layer (from malaria atlas project)
PfPR = raster('/Users/Inga/Documents/Harvard/Research/maps/2015_Nature_Africa_PfPR.2015.tif')
PfPR <- setMinMax(PfPR)
ITN <- raster('2015_Nature_Africa_ITN.2015.tif')
ITN <- setMinMax(ITN)
ITN <- raster('/Users/Inga/Documents/Harvard/Research/maps/2015_Nature_Africa_ITN.2015.tif')
ITN <- setMinMax(ITN)
# make dummy layer to indicate PfPR: PfPR=0 is labeled "0", PfPR >0-10% is labeled "1", 10-20% is labeled "2", etc
dummy <- reclassify(PfPR, c(0,0.1,1,  0.1,0.2,2, 0.2,0.3,3,  0.3,0.4,4, 0.4,0.5,5, 0.5,0.6,6, 0.6,0.7,7, 0.7,0.8,8, 0.8,0.9,9))
plot(dummy, main = "reclassified PfPR, 10% increments")
#stack these layers all together, including the dummy layer
Africa_stack <- stack(ITN, PfPR, dummy)
ir_points <- read.csv("/Users/Inga/Documents/Harvard/Research/maps/IR_points_anopheles_pyrethroids.csv", header = TRUE, sep = ",")
ir_points <- subset(ir_points, Mosquito_collection_year_end>=2013)
coordinates(ir_points) <- c("Longitude", "Latitude")
# extract raster data for each resistance point
ir_point_data <- data.frame(ir_points, extract(Africa_stack, ir_points, cellnumbers=TRUE))
ir_point_data <- select(ir_point_data, -c(optional))
write.csv(ir_point_data, file = "ir_point_raster_data.csv", row.names=TRUE)
library(dplyr)
ir_point_data <- select(ir_point_data, -c(optional))
write.csv(ir_point_data, file = "ir_point_raster_data.csv", row.names=TRUE)
View(ir_point_data)
PfPR <- setMinMax(raster('2015_Nature_Africa_PfPR.2015.tif'))
PfPR <- setMinMax(raster('/Users/Inga/Documents/Harvard/Research/maps/2015_Nature_Africa_PfPR.2015.tif'))     # sets min and max raster values
View(PfPR)
PfPR = raster('2015_Nature_Africa_PfPR.2015.tif')
pop <- raster('/Users/Inga/Documents/Harvard/Research/maps/AFR_PPP_2015_adj_v2.tif')
View(pop)
pop <- setMinMax(raster('/Users/Inga/Documents/Harvard/Research/maps/AFR_PPP_2015_adj_v2.tif'))
?setMinMax
View(ir_point_data)
mu_SR_E0_ITN
mu_SR_ITN
mu_RR_ITN
?barplot
barplot(mu_RR_ITN, names.arg=("First", "Second", "Third"))
barplot(mu_RR_ITN, names.arg("First", "Second", "Third"))
barplot(mu_RR_ITN, names.arg=c("First" "Second","Third"))
barplot(mu_RR_ITN, names.arg= c("First","Second","Third"))
barplot(mu_RR_ITN, names.arg= c("First","Second","Third"), ylim=0:1)
barplot(mu_RR_ITN, names.arg= c("First","Second","Third"), ylim=0:1, col = "mistyrose")
barplot(mu_RR_ITN, names.arg= c("First","Second","Third"), ylim=0:1, col = "mistyrose", title = "Resistant mortality by exposure history")
barplot(mu_RR_ITN, names.arg= c("First","Second","Third"), ylim=0:1, col = "lightcyan")
barplot(mu_RR_ITN, names.arg= c("First","Second","Third"), ylim=0:1, col = "5")
barplot(mu_RR_ITN, names.arg= c("First","Second","Third"), ylim=0:1, col = "6")
barplot(mu_RR_ITN, names.arg= c("First","Second","Third"), ylim=0:1, col = "cornsilk")
barplot(mu_RR_ITN, names.arg= c("First","Second","Third"), ylim=0:1, col = "yellow")
barplot(mu_RR_ITN, names.arg= c("First","Second","Third"), ylim=0:1, col = "mustard")
barplot(mu_RR_ITN, names.arg= c("First","Second","Third"), ylim=0:1, col = "mustardyellow")
barplot(mu_RR_ITN, names.arg= c("First","Second","Third"), ylim=0:1, col = "blue")
mu_RR_ITN
rm(list=ls())
install.packages(c("htmlwidgets", "pheatmap", "plotly", "webshot"))
library(digitize)
setwd("/Users/Inga/Documents/GitHub/DoubleBloodFeeds")
cal = ReadAndCal('Anopheles_EFD.png')
data.points = DigitData(col = 'red')
df = Calibrate(data.points, cal, 0, 40, 0, 80)
write.csv(df, "Anopheles_EFD.csv")
ggplot(df)+
geom_points(aes(x=x, y=y))
library(ggplot2)
ggplot(df)+
geom_points(aes(x=x, y=y))
ggplot(df)+
geom_point(aes(x=x, y=y))
ggplot(df)+
geom_point(aes(x=x, y=y))+
scale_y_continuous(limits=c(0,80))+
scale_x_continuous(limits=c(0,40))+
theme_bw()
nls(y = q*y^2 + r*y + s,
data=df,
start = list(q = 0.153, r = 8.61, s = -97.7))
nls(y ~ q*y^2 + r*y + s,
data=df,
start = list(q = 0.153, r = 8.61, s = -97.7))
nls(y ~ q*y^2 + r*y + s,
data=df,
start = list(q = -0.153, r = 8.61, s = -97.7))
nls(y ~ q*x^2 + r*x + s,
data=df,
start = list(q = -0.153, r = 8.61, s = -97.7))
15:35
params <- nls(y ~ q*x^2 + r*x + s,
data=df,
start = list(q = -0.153, r = 8.61, s = -97.7))
params
params[q]
params['q']
params["r"]
x_range <- c(15:35)
y_range <- c((-1.908)*x^2 + 100.353*x + -1257.111)
y_range
quadratic_function <- function(x, q, r, s) {
y <-  q*x^2 + r*x + s
return(y)
}
y_range <- quadratic_function(x_range, -1.908, 100.353, -1257.111)
y_range
y_range
sim_data <- cbind(x_range, y_range)
sim_data
ggplot(sim_data, aes(x=x_range, y=y_range))
sim_data <- as.data.frame(cbind(x_range, y_range))
ggplot(sim_data, aes(x=x_range, y=y_range))
ggplot(sim_data)+
geom_line(aes(x=x_range, y=y_range))
ggplot(sim_data)+
geom_line(aes(x=x_range, y=y_range))+
geom_point(data=df, aes(x=x, y=y))+
scale_y_continuous(limits=c(0,80))+
scale_x_continuous(limits=c(0,40))+
theme_bw()
source('~/Documents/GitHub/DoubleBloodFeeds/Anopheles_EFD.r')
ggplot(df)+
geom_point(aes(x=x, y=y))+
scale_y_continuous(limits=c(0,80))+
scale_x_continuous(limits=c(0,40))+
theme_bw()
ggplot(sim_data)+
geom_line(aes(x=x_range, y=y_range))+
geom_point(data=df, aes(x=x, y=y))+
scale_y_continuous(limits=c(0,80))+
scale_x_continuous(limits=c(0,40))+
theme_bw()
ggplot(sim_data)+
geom_line(aes(x=x_range, y=y_range))+
geom_point(data=df, aes(x=x, y=y))+
scale_y_continuous(limits=c(0,80))+
scale_x_continuous(limits=c(0,40))+
theme_bw()+
labs(caption = "q=-1.908, r=100.353, s=-1257.111")
ggplot(sim_data)+
geom_line(aes(x=x_range, y=y_range))+
geom_point(data=df, aes(x=x, y=y))+
scale_y_continuous(limits=c(0,80))+
scale_x_continuous(limits=c(10,40))+
theme_bw()+
labs(caption = "q=-1.908, r=100.353, s=-1257.111")
ggplot(sim_data)+
geom_line(aes(x=x_range, y=y_range))+
geom_point(data=df, aes(x=x, y=y))+
scale_y_continuous(limits=c(0,80))+
scale_x_continuous(limits=c(15,40))+
theme_bw()+
labs(caption = "q=-1.908, r=100.353, s=-1257.111")
ggplot(sim_data)+
geom_line(aes(x=x_range, y=y_range))+
geom_point(data=df, aes(x=x, y=y))+
scale_y_continuous(limits=c(0,80))+
scale_x_continuous(limits=c(15,35))+
theme_bw()+
labs(caption = "q=-1.908, r=100.353, s=-1257.111")
ggplot(sim_data)+
geom_line(aes(x=x_range, y=y_range))+
geom_point(data=df, aes(x=x, y=y))+
scale_y_continuous(limits=c(0,80))+
scale_x_continuous(limits=c(15,40))+
theme_bw()+
labs(caption = "q=-1.908, r=100.353, s=-1257.111")
?seq
x_range <- seq(15,35,by=0.1)
y_range <- quadratic_function(x_range, -1.908, 100.353, -1257.111)
sim_data <- as.data.frame(cbind(x_range, y_range))
ggplot(sim_data)+
geom_line(aes(x=x_range, y=y_range))+
geom_point(data=df, aes(x=x, y=y))+
scale_y_continuous(limits=c(0,80))+
scale_x_continuous(limits=c(15,40))+
theme_bw()+
labs(caption = "q=-1.908, r=100.353, s=-1257.111")
ggplot(sim_data)+
geom_line(aes(x=x_range, y=y_range))+
geom_point(data=df, aes(x=x, y=y))+
scale_y_continuous(label="EFD", limits=c(0,80))+
scale_x_continuous(label="Temperature", limits=c(15,40))+
theme_bw()+
labs(caption = "q=-1.908, r=100.353, s=-1257.111")
ggplot(sim_data)+
geom_line(aes(x=x_range, y=y_range))+
geom_point(data=df, aes(x=x, y=y))+
scale_y_continuous(title="EFD", limits=c(0,80))+
scale_x_continuous(title="Temperature", limits=c(15,40))+
theme_bw()+
labs(caption = "q=-1.908, r=100.353, s=-1257.111")
ggplot(sim_data)+
geom_line(aes(x=x_range, y=y_range))+
geom_point(data=df, aes(x=x, y=y))+
scale_y_continuous(name = ="EFD", limits=c(0,80))+
scale_x_continuous(name="Temperature", limits=c(15,40))+
theme_bw()+
labs(caption = "q=-1.908, r=100.353, s=-1257.111")
ggplot(sim_data)+
geom_line(aes(x=x_range, y=y_range))+
geom_point(data=df, aes(x=x, y=y))+
scale_y_continuous(name ="EFD", limits=c(0,80))+
scale_x_continuous(name="Temperature", limits=c(15,40))+
theme_bw()+
labs(caption = "q=-1.908, r=100.353, s=-1257.111")
EFD_plot <- ggplot(sim_data)+
geom_line(aes(x=x_range, y=y_range))+
geom_point(data=df, aes(x=x, y=y))+
scale_y_continuous(name ="EFD", limits=c(0,80))+
scale_x_continuous(name="Temperature", limits=c(15,40))+
theme_bw()+
labs(caption = "q=-1.908, r=100.353, s=-1257.111")
ggsave("Anopheles_EFD.pdf", EFD_plot)
EFD_plot <- ggplot(sim_data)+
geom_line(aes(x=x_range, y=y_range))+
geom_point(data=df, aes(x=x, y=y))+
scale_y_continuous(name ="EFD", limits=c(0,80))+
scale_x_continuous(name="Temperature", limits=c(0,40))+
theme_bw()+
labs(caption = "q=-1.908, r=100.353, s=-1257.111")
EFD_plot
ggsave("Anopheles_EFD.pdf", EFD_plot)
